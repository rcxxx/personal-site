(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[4753],{88671:function(e,t,r){"use strict";r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return k}});var l=r(87462),n=r(63366),a=(r(67294),r(3905)),s=r(93456),o=["components"],i={id:"pytorch-resnet",title:"",sidebar_label:"ResNet"},p=void 0,c={unversionedId:"computer/cv/ml-dl/pytorch/pytorch-resnet",id:"computer/cv/ml-dl/pytorch/pytorch-resnet",title:"",description:"ResNet \u7f51\u7edc\u7ed3\u6784",source:"@site/docs/computer/cv/ml-dl/pytorch/pytorch-resnet.md",sourceDirName:"computer/cv/ml-dl/pytorch",slug:"/computer/cv/ml-dl/pytorch/pytorch-resnet",permalink:"/personal-site/docs/computer/cv/ml-dl/pytorch/pytorch-resnet",draft:!1,editUrl:"https://github.com/rcxxx/docs/tree/master/docs/computer/cv/ml-dl/pytorch/pytorch-resnet.md",tags:[],version:"current",frontMatter:{id:"pytorch-resnet",title:"",sidebar_label:"ResNet"},sidebar:"\ud83d\udc40CV",previous:{title:"Install",permalink:"/personal-site/docs/computer/cv/ml-dl/pytorch/pytorch-install"},next:{title:"YOLO",permalink:"/personal-site/docs/category/YOLO"}},d={},k=[{value:"ResNet \u7f51\u7edc\u7ed3\u6784",id:"resnet-\u7f51\u7edc\u7ed3\u6784",level:3},{value:"ResNet \u7684\u6b8b\u5dee\u7ed3\u6784",id:"resnet-\u7684\u6b8b\u5dee\u7ed3\u6784",level:4},{value:"\u57fa\u672c\u6b8b\u5dee\u5757",id:"\u57fa\u672c\u6b8b\u5dee\u5757",level:4},{value:"ResNet \u7f51\u7edc",id:"resnet-\u7f51\u7edc",level:3},{value:"PyTorch \u5b9e\u73b0 ResNet",id:"pytorch-\u5b9e\u73b0-resnet",level:3},{value:"\u57fa\u7840\u6a21\u5757",id:"\u57fa\u7840\u6a21\u5757",level:4},{value:"\u7f51\u7edc\u5806\u53e0",id:"\u7f51\u7edc\u5806\u53e0",level:4},{value:"\u6784\u5efa\u7f51\u7edc",id:"\u6784\u5efa\u7f51\u7edc",level:4},{value:"\u5b8c\u6574\u4ee3\u7801\u5730\u5740",id:"\u5b8c\u6574\u4ee3\u7801\u5730\u5740",level:4},{value:"\u53c2\u8003",id:"\u53c2\u8003",level:2}],m={toc:k};function h(e){var t=e.components,r=(0,n.Z)(e,o);return(0,a.kt)("wrapper",(0,l.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"resnet-\u7f51\u7edc\u7ed3\u6784"},"ResNet \u7f51\u7edc\u7ed3\u6784"),(0,a.kt)("h4",{id:"resnet-\u7684\u6b8b\u5dee\u7ed3\u6784"},"ResNet \u7684\u6b8b\u5dee\u7ed3\u6784"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://pictures-1304295136.cos.ap-guangzhou.myqcloud.com/screenshot/yolov5_resnet/resnet-building-block.png",alt:null})),(0,a.kt)("h4",{id:"\u57fa\u672c\u6b8b\u5dee\u5757"},"\u57fa\u672c\u6b8b\u5dee\u5757"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://pictures-1304295136.cos.ap-guangzhou.myqcloud.com/screenshot/yolov5_resnet/resnet-block.png",alt:null})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"BasicBlock")," \u7ecf\u8fc7\u4e24\u4e2a 3x3 \u7684\u5377\u79ef\u5c42\uff0c\u518d\u4e0e\u8f93\u5165\u76f8\u52a0\u540e\u6fc0\u6d3b\u8f93\u51fa")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"BottleNeck")," \u7528\u4e8e\u66f4\u6df1\u5c42\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"resnet")," \u7f51\u7edc\uff0c\u5148\u7ecf\u8fc7\u4e00\u4e2a 1x1 \u3001\u4e00\u4e2a 3x3 \u7684\u5377\u79ef\u5c42\u540e\uff0c\u518d\u901a\u8fc7\u4e00\u4e2a 1x1 \u7684\u5377\u79ef\u5c42\u6539\u53d8\u901a\u9053\u6570\uff0c\u518d\u4e0e\u8f93\u5165\u76f8\u52a0\u540e\u6fc0\u6d3b\u8f93\u51fa"))),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"resnet-\u7f51\u7edc"},"ResNet \u7f51\u7edc"),(0,a.kt)("p",null,"ResNet \u7684\u7f51\u7edc\u7ed3\u6784\u5c31\u662f\u901a\u8fc7\u57fa\u7840\u6b8b\u5dee\u5757\u53e0\u52a0\u6765\u642d\u5efa"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://pictures-1304295136.cos.ap-guangzhou.myqcloud.com/screenshot/yolov5_resnet/resnet-net-build.png",alt:null})),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"pytorch-\u5b9e\u73b0-resnet"},"PyTorch \u5b9e\u73b0 ResNet"),(0,a.kt)("h4",{id:"\u57fa\u7840\u6a21\u5757"},"\u57fa\u7840\u6a21\u5757"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"1x1")," \u5377\u79ef\u5757")),(0,a.kt)(s.Mermaid,{config:{},chart:'flowchart TD;\nA["Conv2D_1x1"]\ncode["def conv1x1()"]\n\nstyle A fill:#ffc20e,stroke:#333,stroke-width:2px\nstyle code fill:#90d7ec,stroke:#333,stroke-width:2px',mdxType:"Mermaid"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/rcxxx/torch-resnet/blob/master/py/model.py#L7-L12"},"code")))),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"3x3")," \u5377\u79ef\u5757")),(0,a.kt)(s.Mermaid,{chart:'flowchart TD;\nA["Conv2D_3x3"]\ncode["def conv3x3()"]\n\nstyle A fill:#f58220,stroke:#333,stroke-width:2px\nstyle code fill:#90d7ec,stroke:#333,stroke-width:2px',mdxType:"Mermaid"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/rcxxx/torch-resnet/blob/master/py/model.py#L14-L20"},"code")))),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"BasicBlock")," \u6b8b\u5dee\u5757")),(0,a.kt)(s.Mermaid,{chart:'flowchart TD;\nA["BasicBlock"]\nstyle A fill:#78cdd1,stroke:#333,stroke-width:2px',mdxType:"Mermaid"}),(0,a.kt)(s.Mermaid,{chart:'flowchart LR;\ncode["class BasicBlock(nn.Module)"] --\x3e init["def __init__()"] \ncode --\x3e forward["def forward()"]\n\nstyle code fill:#90d7ec,stroke:#333,stroke-width:2px\nstyle init fill:#ea66a6,stroke:#333,stroke-width:2px\nstyle forward fill:#ea66a6,stroke:#333,stroke-width:2px',mdxType:"Mermaid"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/rcxxx/torch-resnet/blob/master/py/model.py#L23-L52"},"code")))),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"BottleNeck")," \u6b8b\u5dee\u5757")),(0,a.kt)(s.Mermaid,{chart:'flowchart TD;\nA["BottleNeck"]\nstyle A fill:#78cdd1,stroke:#333,stroke-width:2px',mdxType:"Mermaid"}),(0,a.kt)(s.Mermaid,{chart:'flowchart LR;\ncode["class BottleNeck(nn.Module)"] --\x3e init["def __init__()"] \ncode --\x3e forward["def forward()"]\n\nstyle code fill:#90d7ec,stroke:#333,stroke-width:2px\nstyle init fill:#ea66a6,stroke:#333,stroke-width:2px\nstyle forward fill:#ea66a6,stroke:#333,stroke-width:2px',mdxType:"Mermaid"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/rcxxx/torch-resnet/blob/master/py/model.py#L55-L92"},"code")))),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"\u7f51\u7edc\u5806\u53e0"},"\u7f51\u7edc\u5806\u53e0"),(0,a.kt)(s.Mermaid,{chart:'flowchart LR;\ncode["class ResNet(nn.Module)"] --\x3e init["def __init__()"] \ncode --\x3e _make_layer["def _make_layer()"]\ncode --\x3e forward["def forward()"]\n\nstyle code fill:#90d7ec,stroke:#333,stroke-width:2px\nstyle init fill:#ea66a6,stroke:#333,stroke-width:2px\nstyle _make_layer fill:#ea66a6,stroke:#333,stroke-width:2px\nstyle forward fill:#ea66a6,stroke:#333,stroke-width:2px',mdxType:"Mermaid"}),(0,a.kt)("p",null,"\u7f51\u7edc\u5c42\u6570\u901a\u8fc7 ",(0,a.kt)("inlineCode",{parentName:"p"},"layers[]")," \u8fdb\u884c\u8bbe\u7f6e"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"def __init__(self, block, layers, num_classes = 1000):\n    self.in_planes = 64\n    \xb7\xb7\xb7\n    self.layer_1 = self._make_layer(block, 64, layers[0])\n    self.layer_2 = self._make_layer(block, 128, layers[1], stride=2)\n    self.layer_3 = self._make_layer(block, 256, layers[2], stride=2)\n    self.layer_4 = self._make_layer(block, 512, layers[3], stride=2)\n    \xb7\xb7\xb7\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"def _make_layer(self, block, planes, blocks, stride=1):\n    \xb7\xb7\xb7\n    layers = []\n    layers.append(block(self.in_planes, planes, stride, down_sample))\n    self.in_planes = planes * block.expansion\n    for i in range(1, blocks):\n        layers.append(block(self.in_planes, planes))\n\n    return nn.Sequential(*layers)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/rcxxx/torch-resnet/blob/master/py/model.py#L95-L157"},"code")))),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"\u6784\u5efa\u7f51\u7edc"},"\u6784\u5efa\u7f51\u7edc"),(0,a.kt)(s.Mermaid,{chart:'flowchart TD;\nA["def  resnet18()"]\nlayers["layers:[2, 2, 2, 2]"]\nstyle A fill:#ea66a6,stroke:#333,stroke-width:2px\nstyle layers fill:#a3cf62,stroke:#333,stroke-width:2px',mdxType:"Mermaid"}),(0,a.kt)(s.Mermaid,{chart:'flowchart TD;\nA["def  resnet34()"]\nlayers["layers:[3, 4, 6, 3]"]\nstyle A fill:#ea66a6,stroke:#333,stroke-width:2px\nstyle layers fill:#a3cf62,stroke:#333,stroke-width:2px',mdxType:"Mermaid"}),(0,a.kt)(s.Mermaid,{chart:'flowchart TD;\nA["def  resnet50()"]\nlayers["layers:[3, 4, 6, 3]"]\nstyle A fill:#ea66a6,stroke:#333,stroke-width:2px\nstyle layers fill:#a3cf62,stroke:#333,stroke-width:2px',mdxType:"Mermaid"}),(0,a.kt)(s.Mermaid,{chart:'flowchart TD;\nA["def resnet101()"]\nlayers["layers:[3, 4, 23, 3]"]\nstyle A fill:#ea66a6,stroke:#333,stroke-width:2px\nstyle layers fill:#a3cf62,stroke:#333,stroke-width:2px',mdxType:"Mermaid"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/rcxxx/torch-resnet/blob/master/py/model.py#L160-L177"},"code")))),(0,a.kt)("h4",{id:"\u5b8c\u6574\u4ee3\u7801\u5730\u5740"},"\u5b8c\u6574\u4ee3\u7801\u5730\u5740"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/rcxxx/torch-resnet/blob/master/py/model.py"},"rcxxx/torch-resnet/py/model.py")))),(0,a.kt)("h2",{id:"\u53c2\u8003"},"\u53c2\u8003"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://arxiv.org/abs/1512.03385"},"Deep Residual Learning for Image Recognition"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://zhuanlan.zhihu.com/p/31852747"},"\u4f60\u5fc5\u987b\u8981\u77e5\u9053CNN\u6a21\u578b\uff1aResNet"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://pytorch.org/hub/pytorch_vision_resnet/"},"Deep residual networks pre-trained on ImageNet"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/pytorch/vision/blob/main/torchvision/models/resnet.py"},"vision/torchvision/models/resnet.py"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://www.zhihu.com/question/394376741/answer/2447545447"},"\u6df1\u5ea6\u5b66\u4e60\u4e2d\u5f52\u4e00\u5316\u8f93\u5165\u4e3a\u4ec0\u4e48\u8981\u9664\u65b9\u5dee/\u6807\u51c6\u5dee?")))))}h.isMDXComponent=!0},11748:function(e,t,r){var l={"./locale":89234,"./locale.js":89234};function n(e){var t=a(e);return r(t)}function a(e){if(!r.o(l,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return l[e]}n.keys=function(){return Object.keys(l)},n.resolve=a,e.exports=n,n.id=11748}}]);